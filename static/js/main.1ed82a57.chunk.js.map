{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","calculateWinner","squares","lines","i","length","a","b","c","Board","state","Array","fill","xIsNext","this","renderSquare","React","Component","Number","changedValue","e","setState","type","disabled","style","background","onChange","handleValue","Numbers","array","generateSudokuSuccess","avalibleIdx","bind","generateSudoku","rowList","idxOfRowList","idxInList","avalibleList","m","undefined","indexOf","push","blockLastIndex","blockAheadIdx","resultList","from","Set","Math","floor","random","time","Date","getTime","j","notComplete","k","avalibIdx","n","result","marginRight","marginBottom","map","index","changeClassName","renderHtml","v","renderNumber","NumberGame","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ed82a57.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {InputNumber, Button} from 'antd';\r\nimport {InputItem} from 'antd-mobile';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            squares: Array(9).fill(null),\r\n            xIsNext: true,\r\n        };\r\n    }\r\n\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n                'Go to move #' + move :\r\n                'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// ======================================= 数独 start\r\nclass Number extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            changedValue: props.value\r\n        }\r\n    }\r\n\r\n    handleValue(e) {\r\n        this.setState(() => ({changedValue: e === '' ? '' : e > 9 ? 9 : e < 1 ? 1 : e}));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <InputItem type={\"number\"} className={this.props.className} disabled={this.props.disabled}\r\n                       value={this.state.changedValue}\r\n                       style={this.props.className === 'squareGrey' ? {background: '#cfcfcf'} : {}}\r\n                       onChange={(e) => this.handleValue(e)}/>\r\n        );\r\n    }\r\n}\r\n\r\nclass Numbers extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: null,\r\n        };\r\n        this.generateSudokuSuccess = false;\r\n        this.avalibleIdx = this.avalibleIdx.bind(this);\r\n        this.generateSudoku = this.generateSudoku.bind(this);\r\n    }\r\n\r\n    renderNumber(i, className) {\r\n        return (\r\n            <Number\r\n                value={i}\r\n                className={className}\r\n                disabled={!!(i !== '')}\r\n            />\r\n        );\r\n    }\r\n\r\n    // 每行分为3块，idx在三行内不处于同一块\r\n    /**\r\n     *\r\n     * @param {Array} rowList - 当前行的数字填充情况\r\n     * @param {Number} idxOfRowList - 数独第几行\r\n     * @param {Array} idxInList - 同一数字在每行所处位置\r\n     */\r\n    avalibleIdx(rowList, idxOfRowList, idxInList) {\r\n        // console.log('in')\r\n        let avalibleList = []\r\n        for (let m = 0; m < 9; m++) {\r\n            if (rowList[m] === undefined && idxInList.indexOf(m) === -1) {\r\n                if (idxOfRowList % 3 === 0) {\r\n                    avalibleList.push(m)\r\n                } else {\r\n                    let blockLastIndex = idxInList[idxInList.length - 1]\r\n                    if ((blockLastIndex < 3 && m < 3) || ((blockLastIndex >= 3 && blockLastIndex < 6) && (m >= 3 && m < 6)) || (blockLastIndex >= 6 && m >= 6)) {\r\n                        continue\r\n                    } else {\r\n                        if (idxOfRowList % 3 === 2) {\r\n                            let blockAheadIdx = idxInList[idxInList.length - 2]\r\n                            if ((blockAheadIdx < 3 && m < 3) || ((blockAheadIdx >= 3 && blockAheadIdx < 6) && (m >= 3 && m < 6)) || (blockAheadIdx >= 6 && m >= 6)) {\r\n                                continue\r\n                            }\r\n                        }\r\n                        avalibleList.push(m)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let resultList = Array.from(new Set(avalibleList))\r\n        return resultList[Math.floor(Math.random() * resultList.length)]\r\n\r\n    }\r\n\r\n    generateSudoku() {\r\n        let array = new Array(9)\r\n        for (let i = 0; i < 9; i++) {\r\n            array[i] = new Array(9)\r\n        }\r\n        let time = new Date().getTime()\r\n        for (let j = 0; j < 9; j++) {\r\n            let idxInList = []\r\n            let notComplete = true\r\n\r\n            while (notComplete) {\r\n                idxInList = []\r\n                for (let k = 0; k < 9; k++) {\r\n                    let avalibIdx = this.avalibleIdx(array[k], k, idxInList)\r\n                    if (avalibIdx !== undefined) {\r\n                        idxInList.push(avalibIdx)\r\n                    }\r\n                }\r\n                if (idxInList.length === 9) {\r\n                    notComplete = false\r\n                } else if (new Date().getTime() - time > 1000) {\r\n                    return\r\n                }\r\n            }\r\n            // 要return，不map\r\n            for (let n = 0; n < idxInList.length; n++) {\r\n                array[n][idxInList[n]] = j + 1;\r\n                if (j === 8 && n === 8) {\r\n                    this.generateSudokuSuccess = true;\r\n                    return array\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        this.generateSudokuSuccess = false;\r\n        let result = null;\r\n        while (!this.generateSudokuSuccess) {\r\n            result = this.generateSudoku()\r\n        }\r\n        result = this.state.array ? this.state.array : result;\r\n        /*const boards = Array(9);\r\n        for (let x = 0; x < 9; x++) {\r\n            boards[x] = Array(9);\r\n            let changeClassName = false;\r\n            if ((x / 3) % 2 >= 1) {\r\n                changeClassName = true;\r\n            }\r\n            for (let y = 0; y < 9; y++) {\r\n                if (y % 3 === 0) {\r\n                    changeClassName = !changeClassName;\r\n                }\r\n                boards[x].push(this.renderNumber('', changeClassName ? 'square' : 'squareGrey'));\r\n            }\r\n        }*/\r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    <Button type=\"primary\" style={{marginRight: 5, marginBottom: 5}}>\r\n                        提交\r\n                    </Button>\r\n                    <Button type=\"primary\" style={{marginRight: 5, marginBottom: 5}}>\r\n                        重置\r\n                    </Button>\r\n                    <Button type=\"primary\" style={{marginRight: 5, marginBottom: 5}} onClick={() => {\r\n                        this.generateSudokuSuccess = false;\r\n                        this.setState({\r\n                            array: null\r\n                        });\r\n                        let result = null;\r\n                        while (!this.generateSudokuSuccess) {\r\n                            result = this.generateSudoku()\r\n                        }\r\n                        this.setState({\r\n                            array: result\r\n                        });\r\n                    }}>\r\n                        重新生成\r\n                    </Button>\r\n                </div>\r\n                {/*{boards.map((value, index) => {\r\n                    if (index !== (boards.length - 1)) {\r\n                        return (\r\n                            <div className=\"board-row\">\r\n                                {value}\r\n                            </div>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <div className=\"board-board\">\r\n                                {value}\r\n                            </div>\r\n                        );\r\n                    }\r\n                })}*/}\r\n                {result.map((value, index) => {\r\n                    let changeClassName = false;\r\n                    if ((index / 3) % 2 >= 1) {\r\n                        changeClassName = true;\r\n                    }\r\n                    const renderHtml = Array(value.length);\r\n                    value.map((v, i) => {\r\n                        if (i % 3 === 0) {\r\n                            changeClassName = !changeClassName;\r\n                        }\r\n                        renderHtml[i] = this.renderNumber((Math.random() >= .3 ? v : ''), changeClassName ? 'square' : 'squareGrey');\r\n                    });\r\n                    if (index !== (result.length - 1)) {\r\n                        return (\r\n                            <div className=\"board-row\">\r\n                                {renderHtml}\r\n                            </div>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <div className=\"board-board\">\r\n                                {renderHtml}\r\n                            </div>\r\n                        );\r\n                    }\r\n                })}\r\n                <div className=\"board-row\">\r\n                    {Array(9).fill(0).map((value, index) => {\r\n                        return (<button className=\"square\">{index + 1}</button>);\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass NumberGame extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Numbers\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ======================================= 数独 end\r\n\r\n// ========================================\r\n\r\nconst element = (\r\n    <div>\r\n        <NumberGame/>\r\n    </div>\r\n);\r\n\r\nReactDOM.render(\r\n    element,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}